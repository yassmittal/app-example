{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "NFT",
  "functions": [
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1277205442539915643": {
            "error_kind": "string",
            "string": "max supply limit reached"
          },
          "1807958972175993320": {
            "error_kind": "string",
            "string": "listing is not active"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3655612186068596320": {
            "error_kind": "string",
            "string": "token not exist"
          },
          "3992192655176357659": {
            "error_kind": "string",
            "string": "Function get_nft_count can only be called statically"
          },
          "4231505675063574899": {
            "error_kind": "string",
            "string": "seller is not owner"
          },
          "4909854590541973695": {
            "error_kind": "string",
            "string": "buyer cannot be seller"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "6936131900843625814": {
            "error_kind": "string",
            "string": "Function is_mint_public can only be called statically"
          },
          "7035514165980004842": {
            "error_kind": "string",
            "string": "invalid recipient"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "7850179556627242308": {
            "error_kind": "string",
            "string": "Function get_token_uri can only be called statically"
          },
          "7955645436933671353": {
            "error_kind": "string",
            "string": "Function get_total_nft_count can only be called statically"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          },
          "8364301212157077058": {
            "error_kind": "string",
            "string": "mint limit per wallet exceeded"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9542695600093932550": {
            "error_kind": "string",
            "string": "Function get_mint_price can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "11403014254008051269": {
            "error_kind": "string",
            "string": "price should greater than 0"
          },
          "11988194033336150524": {
            "error_kind": "string",
            "string": "Function _store_nft_set_partial_note can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14173247481526980905": {
            "error_kind": "string",
            "string": "Function get_max_supply can only be called statically"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14466155340988305413": {
            "error_kind": "string",
            "string": "caller is not a minter"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "16844128626461701871": {
            "error_kind": "string",
            "string": "caller is not the seller"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4718290446670665014": {
            "error_kind": "string",
            "string": "NFT not found when transferring to public"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACSHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAAC7HgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAAzS8MAAIAASYoAIAEBHgADQAAAIAEgAMkAIADAAAAuioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF0E3qz6yL/WM8AQECJg==",
      "debug_symbols": "vZXbisIwEIbfJde9yMzkMPFVlkWqRimUVmpdWMR330SaWt2wXUR6UzLlm/7TOWQuYuc358O6avbtSaw+LqJut2VftU2wLtdCbLqqrqvDevpayPiw+safjmUTzVNfdr1YAaGWhfDNLp6JdfjGvqp9sCCcf/MSMeFS4YTGDK2MgYFWxsqRZpmBWUs9wKwRpvBnIVi+J3znEg7gFgz/TdnXPGaf57IP2tpEG6K/w3fapX91htRT+I7eHT7gY/hRhBcQAWmWUAHIqmDojOSGWtGMig39OuA28DMVRJNG0yHrpwoCmP9E9Pjf0Q/hRb8X9Ui96OdyfhhmOKUwnJlHP53LIRlMQ0xTGDg7YGjH2wTd/TbB7DhazSoV08iZYlpiSrCa9FcWBiBrxm5U0j3U/hqsr7Kryk3thy2xPzfbydLov4/+aX8cu3brd+fOx01yXyIQb2G0BeGtpYJBVJAOGkHnBw==",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "_finish_transfer_to_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finish_transfer_to_public"
      ]
    },
    {
      "name": "set_mint_type",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "is_mint_public",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQdAIBEgEQBLgiARAABJQAAAEwlAAAATSgCAAEEgEUnAgIEADsNAAEAAiYlAAAAqR4CAAIAHgIAAwAzOAACAAMABCcCAgEBJAIABAAAAHYlAAAA0icCAgAFLwwAAgADHgIAAgEKOAMCBCQCAAQAAACYJQAAAOQcDAECACcCAQAUMAwAAgABJigAgAQEeAANAAAAgASAAyQAgAMAAADRKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQIm",
      "debug_symbols": "5VbbbsIwDP2XPvchviXOfmWapgJlqlQVVGDShPj3pRVpu67QCSH2wEsVV8fxcXzi+Jis8sXh472o1ptd8vJ6TMrNMtsXmypYx1OaLOqiLIuP9+HvxDQfxRa/22ZVY+72Wb1PXoBQTJrk1apZk0rYY12UebAgrH/jDWKEG8YBGifQbC2c0Wyd6dBqJsAqRs5gFYQh+C1N1N2HvvcRDuAfR9/f6fRFu9PXudMHcS6iLdF1+l58zNVb4hF9MObe/AF/8m+jyCOiAD0kik5FQRSIFyisqReVTFUFgKULMlAgKE2gnSif0c4auV5wR0oRzAP+Os2DnO2IsPFjfSA9Vbb+QrZk+2yFr2fLSpE/K+Ncd3HYdRd1Y0LEfzh+cUNCrZu/yY3dTW6CF9w8d252UJtpjbCJfQoY3YxG1LhYdjU60wK50xP7fmMKdWzZu39g3+lJQ7eZUbhSfNqcejOncNb+qgnasaAsPk22p2B9ZnWRLcr8PEWtD9VyMFTtv7b5aL7a1ptlvjrUeTNp9UMWNM8kQUq2fQKCwSZlDDFCnG8=",
      "brillig_names": [
        "set_mint_type"
      ]
    },
    {
      "name": "get_token_uri",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "struct",
              "path": "compressed_string::field_compressed_string::FieldCompressedString",
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7850179556627242308": {
            "error_kind": "string",
            "string": "Function get_token_uri can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_token_uri"
      ]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_store_nft_set_partial_note",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11988194033336150524": {
            "error_kind": "string",
            "string": "Function _store_nft_set_partial_note can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAACXHgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADAHgIAAgEeAgADAAo4AgMEJAIABAAAAIslAAAA0icCAgABMAwAAgABJigAgAQEeAANAAAAgASAAyQAgAMAAAC/KgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQWmXp71B3Vp/DwBAQIm",
      "debug_symbols": "1VXbbsIwDP2XPPchtnNx+JVpQgUCqlS1qJRJE+Lfl6KmBNbBhLpKe6ni6rjn+MSuT2LjV8fdsqi29UEs3k6irNd5W9RViE7nTKyaoiyL3TJ9LWT3sPqCP+zzqgsPbd60YgGEWmbCV5vuTKzDN7ZF6UME4fwdLxEjXCpM0DiCVsZAj1bGygHNcgTMWuoezBohBb9nguU08p2LcAA3o/yJ3Nc8uM/P3AdtbUQbosfynXaxVmdI3cl3NLV8wFv5HQnPQALSzMECMMoCzg1pKME8YVFMKjYgJ9P2QwNaHBqQ7d0NAozXjclA4+1E678dCcDfeKTUjaJLnnktj9SLeW40z8ihunDG613qUS8kmehF6J3Hxlmm+Juy7J64DKB4EAI6EdL7rNQ/1n8O0UfeFPmq9P2O2x6rdbLy2s+9v9t++6Ze+82x8d0evK5A6HYIckZ0GYgQhPEiEzgCzxc=",
      "brillig_names": [
        "_store_nft_set_partial_note"
      ]
    },
    {
      "name": "set_mint_price",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_price",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQdAIBEgEQGLgiARAABJQAAAEwlAAAATSgCAAEEgEUnAgIEADsNAAEAAiYlAAAAqR4CAAIAHgIAAwAzOAACAAMABCcCAgEBJAIABAAAAHYlAAAA0icCAgAFLwwAAgADHgIAAgEKOAMCBCQCAAQAAACYJQAAAOQcDAECACcCAQAXMAwAAgABJigAgAQEeAANAAAAgASAAyQAgAMAAADRKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQIm",
      "debug_symbols": "5ZbNbsIwDMffpece4q/E4VWmCRUoqFJVUIFJE+LdlzJSuq7QCSF24FLF1d/1z46b+JAs8tl+NS2q5XqbTN4OSbmeZ7tiXQXrcEyTWV2UZbGadl8npnkonvTbTVY15naX1btkAoRi0iSvFs2aVMI3lkWZBwvC+rfeIEa5YeyocUDN1sJZzdaZVq1mQKxi5CxWQeiK39NE3WPwvY9yAP88fP+g6ou21dex6oM4F9WW6Da+Fx9z9Za4hw/GPJof8Cf/KYo8IwrQU6LoUBREhFjnsMZLC8rQrgCwtEE6HQhKA2onyme1s0Zub7gjpSjmDr8Oc5CzLQgb3+8PpJfK1l/JluSSrdDtbFkp8rMyjp0uDtvTRV0fiPgP5RfbBTq5+bvc2N3lJnjFzVPrRuBGeoRNDAKMbqRH1Lj4bTU6cgQGwPZykM6GkPA3v/sHfrItv+hIjytFfqfejPU46+VnE7T9lrL4Mtkeg/WR1UU2K/PzHLXcV/POWLX73OS9CWtTr+f5Yl/nzax1GbOguSgJUrKnSyAYbFLGECPE+QI=",
      "brillig_names": [
        "set_mint_price"
      ]
    },
    {
      "name": "set_mint_limit_per_wallet",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_mint_limit",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQdAIBEgEQELgiARAABJQAAAEwlAAAATSgCAAEEgEUnAgIEADsNAAEAAiYlAAAAqR4CAAIAHgIAAwAzOAACAAMABCcCAgEBJAIABAAAAHYlAAAA0icCAgAFLwwAAgADHgIAAgEKOAMCBCQCAAQAAACYJQAAAOQcDAECACcCAQAVMAwAAgABJigAgAQEeAANAAAAgASAAyQAgAMAAADRKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQIm",
      "debug_symbols": "5VbdaqtAEH4Xr72Y393ZvsrhUExiiiAmmOTAIfTduwbXWGtjKSG96I3syDd+3/w4O+dsU65OL89Vs90dsqc/56zerYtjtWuidX7Ns1Vb1XX18jx+nUH3MLrgD/ui6czDsWiP2RMyKeRZ2Wy6M5vGb2yruowWxvNHPBAlOAiN0DSDFuewR4vzMKANZsCmoD3YlHAM/ptn5u8jP4QERwyPkx/ulH21Ifu2lH1U7xPaMd+WHzSkWINjmchHgHvrR3qv/8Kij2BBfgiLzbEQGaeixLNeWXSuKoiiA8moA9F4Bu3VpEd7B3q74J6NE1hG+m1eB3s3CBEI0/4g/lXRhk+iHeZFPPtwO1oxTvrFhJami6dhupifCmL5QvpHA0N7t/AtN/HfclOadwsYBregstAjAinHKOQXesTAp7IbGC+VHUZ/9HWCc9R00e9/QD+7Qb/aQo8bJyHeAiwFK3b92ZTctKUc/ZpoX6P1r2irYlWX/R61PTXr0Vp1/L8vJxvWvt2ty82pLbtd67pmYXdRMubsLpdANARyocgRed4A",
      "brillig_names": [
        "set_mint_limit_per_wallet"
      ]
    },
    {
      "name": "is_minter",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "minter",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHxgAAwACgEguCIBIAAElAAAASyUAAABvLgQAAYBJKAIAAgSASScCAwQBOw0AAgADKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAnQeAgACAB4CAAMAMzgAAgADAAQkAgAEAAAAkyUAAAKdHgIAAgknAgMAAQo4AgMEJAIABAAAAK8lAAACrycCAgAALQgBAycCBAQEABABBAEnAwMEAQAoAwIELQwEBS0OAgUAKAUCBS0OAgUAKAUCBS0OAgUtDQMEACgEAgQtDgQDKwIABAAAAAAAAAAAAgAAAAAAAAAALQgBBScCBgQFABABBgEnAwUEAQAoBQIGLQwGBy0OAgcAKAcCBy0OAgcAKAcCBy0OAgcAKAcCBy0OBActDQMEACgEAgQtDgQDLQ0FBAAoBAIELQ4EBS0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgqARQAFLQgBBgAAAQIBLgqARAAGJwIHAAYnAggECS0IAAktDAQKLQwDCy0MBQwtDAYNLQwHDgAQAAgAJQAAAsEtBAAAJwIHBAgtCAAILQwECS0MAwotDAULLQwGDC0MAQ0AEAAHACUAAALBLQQAAC0NBgELKAABgEQAByQCAAcAAAINJwIIBAA8CQEIJwIBBActCAAHLQwECC0MAwktDAUKLQwGCwAQAAEAJQAAA+otBAAALQ0DAQEoAAGARwAELQ0EAwo4AwIBCygAAYBEAAIkAgACAAACXiUAAAT9LwwAAwABHAwBAwEcDAMCABwMAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAKcKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV0AjB8R9WsczwBAQImJQAAAnQtDQMGLQ0EBwsoAAeARAAIJAIACAAAAucnAgkEADwJAQkLKAAGgEMAByQCAAcAAAN2IwAAAvwtDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADISUAAAUPLgQABoADKACABAQABCUAAAUhLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA2ElAAAFry0OCgEtDgcCLQ4FAy0OCQQjAAAD6ScCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPqLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFIS4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+kmJQAAAnQuCIBFAAUjAAAD+g0oAAWAQwAGJAIABgAABGojAAAEDy0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASIIwAABPQtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUhLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPQtDAYFIwAAA/oqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU8IwAABUcuAIADgAUjAAAFri4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWaLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVpKAGABQQAAQMAgAYAAoAGIwAABa4mKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3dbts6DMffJde9kKgPinuV4aBou6wIECRF2h7goNi7HyWrbDehrZoKNhTmTREv+lvUz5JI0Yv0tvqxvn99vN3sfu6fV9++v622+4e7l81+l6/eft2s7g+b7XbzeDv855U5/rE2ngTPT3e74/Xzy93hZfXNOgjmZrXe/Th+dinkm/zcbNf5yubPl+UNQCluPAxKA1Pax2jfS/uIpiudDFM4BRPeC6cAdlj4n5uVBXsd+4lKcWvpT9p/Jf4hdfxTjb8NiKV0dG7afgpUGkvR+XP7nb+2/RY+2n+sxcMfqQXZWiA/tiKD4F2lFsyd6b045vIVuhDLwCFI4ZxugM9Y9LHdJx3KdFFYHxqhLnA6cBRKB82fsdcFwz7W6PrBO3g86NnOH8utTd8FnIvcoyRfxi4S9XcGIqa0w9IZ/WCcAGcygC03BhiMQLZw8AVG8GlY9EgwGSXYSNArwUaCpATbCJL2wVaC2gfbCILRPthKMCnBNoIWlGAjQVSCbQT5jIISnEEwKsE2gk5XdZ8gmEpyIQxSXoWgV4KNBDWibiTonRKsEoxd2fix6JFg1FHcSlDXJI0EUUdxK0Htg40Ek/bBVoLaBxsJkuZmWgnquriNoDOam2klqG/cGwlazc20EvRKsJGg5mYaCYJG1OcET1j09RGHxWnsy2LRgJbD4jVCYLFo6MliUV/OYQnqoFksmsfisER10CwWddAcFtQ0EotFHTSLRR00h0V/N8FiIQ3+WSzaW1gsOrcwWPxi31I467oGQjzHsthXDxUs2ltYLEudW6axLDbzX8Gy1Mz/NBa31KViBYtOuSwWnXI5LN4rFg6L9hYOy2Iz/xUsS838T2NZbOa/gmWpmf9pLKgraBaLOmgWi065HJakUy6LRVfQHJbF/m6kgmWpDhp9KQsY5IUzw2CW6s3nMLQx+dI+NHDBcKk+7ooMrY7lZoaL3XbnmgyXmpWdxRCp2/042XO/HBa79c41GXpl2MxQ/XIzQ7/Upcc1GWps08wwqE9pZ6ixTTPDqP2wnaFXhs0MNbb5BENyXfvIXzBE9cvNDK9zeIZN3akyMDzjhGUYAhXzY4Le/HwXjmJ30BBiv0msTe63+eFLm0/uK5sfr7MX0d8z/zPzR0o187tRbu3gJKxjJYxBocteYTSVk5HQpTJ00Q8Oa0q8HQ5jZ4g3NCx+bO2nNpa/dmuxby2Y6QYELMdAhdQb7/L8drIev7L18JXZI/+bC2s6L2TNQPXbsSC/w1FNxEZF1gbfN/w85Ysj58dNi0YObauISCDit0DO81U3WsFcgOBDbOv7w8SGE0IRJYEIQSKKAhEfatREkjaRwLzEO7P8bLuHG9BeiFAgGhkaFREJRPzbkIqIT//XRKKaRtpEXcQa7fkP49LIEYXTopFTBKdF0UhEQSKSgOB3Za6JJPTSyAmd/crChYvxRFYiChIRzReRcRIRCkTWSkQC5ASSmiBIRBLkToLcjSCP3aLBpfOJhUZ87rSIT1HXREEgilYiigIR/79aayKBz6UEEpHAURMJarKGDy3zIqwLkv2FhvdP1CWMCOOFhu96FQ3O1wQr0IT5MXnOjxmRyotUJFGhqC4U1ZVEdSVRXSSpyxojUsnqkrQrpypEKpSoRnxiTSUZKZaPnCfnmJHTw7NXLuPYM5r585LlR/F0PVFgG78Indbwa9CKJs5nkKxAI6iH3wCHUukHH94GFE2YrQFjBBpfaQ+nmd/fgN+RYlrDp8kqmvm+E5wTaNJ8jSAWAEEsAIJYAILg+YSZ/eBXvvr37rC5u9+un7Pi+OXr7uFls9+9X77891S+uT9sttvN4+3TYf+w/vF6WN9u9w/H71bm/c93yOlSwHTyjfkyw7qxQKfhc/wW6QaSzbXmmv8H",
      "brillig_names": [
        "is_minter"
      ]
    },
    {
      "name": "set_base_uri",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "base_uri_parts",
            "type": {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "string",
                "length": 31
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICDJwAABAMnAgIEPicCAwQAHxgAAwACgEUdAIBFgEUCHQCARoBGAh0AgEeARwIdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAigCAAEEgEUnAgMEAi0IAQInAgQEAwAQAQQBJwMCBAEAKAICBCcCBgQAJwIHBAAAOAEGCCcCCgQfLQgBCScCCwQgABABCwEnAwkEAQAoCQILLgQACIADLgQAC4AELgQACoAFJQAAArEAOAQHCi0OCQonAgYEHycCBwQBADgBBggnAgoEHy0IAQknAgsEIAAQAQsBJwMJBAEAKAkCCy4EAAiAAy4EAAuABC4EAAqABSUAAAKxADgEBwotDgkKLQwCASUAAAL3JQAAAwYoAgABBICDJwICBAA7DQABAAIBAIADgAWABy4AgAOACC4AgASACQsAgAiAB4AKJACACgAAAvYuAYAIgAYuAoAGgAkBAIAIAAKACAEAgAkAAoAJIwAAAsUmKACAQwEAASgAgEQEAAEmJQAAA8ceAgACAB4CAAMAMzgAAgADAAQkAgAEAAADKiUAAAPwJwICAAUvDAACAAMeAgACAQo4AwIEJAIABAAAA0wlAAAEAgEoAAGARAADLQ0DAicCBAQFLQgABS0MAgYuCIBDAAcAEAAEACUAAAQULQQAAC0MBgMnAgIEAgA4AQIFLQ0FBCcCAgQFLQgABS0MBAYuCIBDAAcAEAACACUAAAQULQQAAC0MBgEnAgIACzAMAAMAAicCAgAMMAwAAQACJigAgAQEeAANAAAAgASAAyQAgAMAAAPvKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQImJQAAA8ctCAEEAAABAgEnAgUAAC0OBQQtCAEFAAABAgEnAgYAAS0OBgUnAgYEACcCBwQfKAIACAABAC0MBgMjAAAEVww4AwcGJAIABgAABG4jAAAEaS0NBAEmLQgBBgAAAQIBLQ4DBiQCAAIAAASIIwAABLMCOAcDCQMoAAmARAAKDzCARAAJAAskAgALAAAEqiUAAAUMLQ4KBiMAAASzLQ0ECS0NBgoMOAoHBiQCAAYAAATNJQAABR4AKAECCwA4CwoMLQ0MBhwMBgoALQ0FBgQ4CgYLADgJCwotDgoEBDgGCAktDgkFASgAA4BEAAYtDAYDIwAABFcqAQABBSiGkrBH3P1DPAEBAiYqAQABBcVrxFoOEAACPAEBAiY=",
      "debug_symbols": "5ZnNbiIxDMffZc4cYjv+SF9ltapoO62QEFSUrrSq+u6bacmQhQyzZBku9FCRyr/+7ThOTPLRPLUP7y/3i9Xz+q25+/HRLNeP8+1ivYqjj89Z87BZLJeLl/v8z43rfqmGL+Dtdb7qxm/b+Wbb3AEhu1nTrp66z2Qc/8nzYtnGEcTPx/YOMZk7j5k1Fqy9COysvajrrc0VjI0d74yNEXLjn7NGzV/G/xCSOUC4pv8Xmn+2fv5tbP6BVZO1EJ32P3BIwQYhf+h/0Ev7D/i3/1HFHF9DBVxRxXnKFjfv882l+QLw3ItkiwOMCtbK5nfWKo5Pp0LJKBn7zH8r+0EqvSPehYPMGfAtRYswEC3LPlr1p6P1Rsl/bx7HCl+xL3zTI4fkH6ZfNXeowwjqsFCF+fLuGutoP2vi6BBjrMMGpoQZMmwkRyIpIs1WAdl3iQtML8HTS4TJJXT6KMxNL3GFKKbPRaCyhDDtJdQdllOwGiw4qsN0AAPLMPiPeQiA00vI5BLoppeYPoqhc+iSEtNH4afPxeARCr6XYJKRNsu7fjfxqCNtljlK52zsnG2kzYq9QXLfghtrs7zt+z1GOehqgg+3FC3zLUUr7oaije1weSlrvzNoVuyK3xBTDWQVkNQoSfGQRpc2MMya8h5SqIGkArIKpfhThDAtM8y+O/YQFpNLmhYQhQJEvkKJrALyVAGV6xNDqiByUIB4DOJjSKkCGkjuCBQqoODPh9BRDaQVEEANJBUQ1kzEQGlQ2lgouxPqoXJpjEE1SuXSyKFQgKwCKt9iEKW7U5ISVFwR8aLyFCRYA8n5WxiW9/IxiM+EPuPw13yzmD8s290TxPP76jF7kdj+fm0PHideN+vH9ul903bPFPsXii7dcY+fxRL4OiO6odAMxL5qvRvGezZQH1Wj8h8=",
      "brillig_names": [
        "set_base_uri"
      ]
    },
    {
      "name": "get_private_nfts",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "page_index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "array",
                "length": 10,
                "type": {
                  "kind": "field"
                }
              },
              {
                "kind": "boolean"
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_private_nfts"
      ]
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_in_public"
      ]
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "notify_created_nullifier_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954044801249163952": {
            "error_kind": "string",
            "string": "NFT not found when transferring"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "create_listing",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "price",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "3655612186068596320": {
            "error_kind": "string",
            "string": "token not exist"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "11403014254008051269": {
            "error_kind": "string",
            "string": "price should greater than 0"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "create_listing"
      ]
    },
    {
      "name": "cancel_listing",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1807958972175993320": {
            "error_kind": "string",
            "string": "listing is not active"
          },
          "3655612186068596320": {
            "error_kind": "string",
            "string": "token not exist"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16844128626461701871": {
            "error_kind": "string",
            "string": "caller is not the seller"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "cancel_listing"
      ]
    },
    {
      "name": "mint",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_uri_parts",
            "type": {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "string",
                "length": 31
              }
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1277205442539915643": {
            "error_kind": "string",
            "string": "max supply limit reached"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8364301212157077058": {
            "error_kind": "string",
            "string": "mint limit per wallet exceeded"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14466155340988305413": {
            "error_kind": "string",
            "string": "caller is not a minter"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "mint"
      ]
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_transfer_to_private_unsafe"
      ]
    },
    {
      "name": "is_mint_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "6936131900843625814": {
            "error_kind": "string",
            "string": "Function is_mint_public can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACqHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADTHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA5ScCAQAULwwAAQACHAwCAwEcDAMBABwMAQIBLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAA0ioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFYEIXNvEKDVY8AQECJg==",
      "debug_symbols": "5VbRasMwDPwXP+fBki1b3q+MUdI2LYGQlDQdjNJ/n93FaZqZZZTSUfZSrHLKnXSW0VGsi+VhuyjrTbMXL69HUTWrvCub2kfHUyaWbVlV5XYx/lvI8GPpjN/v8jqE+y5vO/ECCklmoqjX4ayY/Dc2ZVX4CPz5O14iRrjUOEJjAq2NgR6tjZUDmmUCzCSpBzMhjMFvmWB5H/nORTiAe6D8O3WfeOg+z3UfyNqINkr9LN+Ri7U6o/REvlP3lg94LT+Q8ANIQJpHsAAkWdDfjJiGpNUMi/X3tYdbj59xEE0cTYdMEwcBzG8UXdcd8hBuzLuRT+kb81wqD9FCHEt/Hr1YlOohgKbB1tHEA6uUPcQ62mPkjD1WsYpgPboxnNahrBmEaOmmbmr9n6ol+QfV2ku1OPP2k42TR3wRr0h/qadnVm+et/cnH77nbZkvq6LfjzaHejVal7qPXTHZnHZtsyrWh7YIO9RlfYLQBoWZsufHNAScaek5PM8n",
      "brillig_names": [
        "is_mint_public"
      ]
    },
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAACYHgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADBJwICAAUvDAACAAMeAgAEAQo4AwQFJAIABQAAAJElAAAA0zAMAAEAAiYoAIAEBHgADQAAAIAEgAMkAIADAAAAwCoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFedUGXr5zdNI8AQECJg==",
      "debug_symbols": "5ZVRi8IwDMe/S5/30DRJm/pVjkOmThmMKXMeHOJ3v07WWXXnDhFf7kUS+WX5N0mbo1oVi8NmXtbr7V7NPo6q2i7zttzWwTueMrVoyqoqN/P0b6W7H8dnfr/L687dt3nTqhmgYZ2pol51NgqHb6zLqggeBPue18ZEXJNJaDNCk7XQ02SdHmjRI7Cw5h4WNpDCn5kS/Rr53kccwL9R/ouqzzJUX6aqD+xcpC3iY/mefTyrt0g38j2+Wj6Ya/ldEnlDEtD2HVkAxrIY1ByvT7CTkeKxngAQD0kSGARHaMdCPe2s5sftdigYYUr0y7gOdHYQQtrfTAeA/U+nNeaX0w5hwfb0+LQkGPWTkJl6W5wZ3hZxd4LcH8rvXSqoC0PzVBjp58J4PAyGOgSbcWJGSMdXCsi4iRkRjbEjEu7rxIwIxtXgxOupGSG5DCsbe9WSU/C+8qbMF1XR7+X1oV4ma7r93hU3G3vXbJfF6tAU3e6+rG3oqm0kQzxftOCgy9CHHCHPDw==",
      "brillig_names": [
        "set_admin"
      ]
    },
    {
      "name": "set_minter",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "minter",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "approve",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgMEAicCBAQAHxgABAADgEgdAIBJgEkBLgiASAABLgiASQACJQAAAFIlAAAAdigCAAEEgEonAgIEADsNAAEAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJ3HgIAAwAeAgAEADM4AAMABAAFJAIABQAAAJolAAACoCcCAwAFLwwAAwAEHgIAAwEKOAQDBSQCAAUAAAC8JQAAArInAgMAAC0IAQQnAgUEBAAQAQUBJwMEBAEAKAQCBS0MBQYtDgMGACgGAgYtDgMGACgGAgYtDgMGLQ0EBQAoBQIFLQ4FBCsCAAUAAAAAAAAAAAIAAAAAAAAAAC0IAQYnAgcEBQAQAQcBJwMGBAEAKAYCBy0MBwgtDgMIACgIAggtDgMIACgIAggtDgMIACgIAggtDgUILQ0EBQAoBQIFLQ4FBC0NBgUAKAUCBS0OBQYtCAEFAAABAgEtDgQFLQgBBAAAAQIBLQ4GBC0IAQYAAAECAS4KgEUABi0IAQcAAAECAS4KgEQABycCCAAGJwIJBAotCAAKLQwFCy0MBAwtDAYNLQwHDi0MCA8AEAAJACUAAALELQQAACcCCAQJLQgACS0MBQotDAQLLQwGDC0MBw0tDAEOABAACAAlAAACxC0EAAAtDQcBCygAAYBEAAgkAgAIAAACGicCCQQAPAkBCScCAQQILQgACC0MBQktDAQKLQwGCy0MBwwAEAABACUAAAPtLQQAAC0NBAEBKAABgEcABS0NBQQKOAQDAQsoAAGARAADJAIAAwAAAmslAAAFABwMAgEAMAwAAQAEJigAgAQEeAANAAAAgASAAyQAgAMAAAKfKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQImJQAAAnctDQMGLQ0EBwsoAAeARAAIJAIACAAAAuonAgkEADwJAQkLKAAGgEMAByQCAAcAAAN5IwAAAv8tDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADJCUAAAUSLgQABoADKACABAQABCUAAAUkLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA2QlAAAFsi0OCgEtDgcCLQ4FAy0OCQQjAAAD7CcCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPtLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFJC4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+wmJQAAAncuCIBFAAUjAAAD/Q0oAAWAQwAGJAIABgAABG0jAAAEEi0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASLIwAABPctDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUkLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPctDAYFIwAAA/0qAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU/IwAABUouAIADgAUjAAAFsS4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWdLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVsKAGABQQAAQMAgAYAAoAGIwAABbEmKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3Rbts6DIbfJde9kChKovYqw0HRdl0RIEiKtD3AQbF3P3JWKW7MWAsVbBjMmyJu+If0Z0mk5MR6X317vH97ul1vv+9eVl++vq82u4e71/Vum4/ef9ys7vfrzWb9dDv+98oMfyy4g+Dl+W47HL+83u1fV1+sA29uVo/bb8NrRz5/yPf15jEf2fx6am8AirlBGFkDY40h2A9rDNFUazKMMXnjP4zJgx0b/3OT46frxJ9SMbc2/cb43ZX4e6r8qcXf+hiLdXBuPv7kUznZFByexo/22vFb+Bz/wUv6HV48cl4geymNI7+Oseo8x8ta9NXJqHFYcox19IQf1jEYP38poiNXjHEUP/FxuBhqIGjS6ZXzaUlnG/yZs61OwDlj588WyZX4kRBaHT9C7fgUTwOKpo3fGRwHdJB5kYycTEa8zKE9ynxqtBET3HFwPQ43NiI7OJXrCOZI2LnANZFUW19M6fjJkBJj7WIZLHA0jgEXMoAtHwwwGiFZY49lNPVIY9OBYHJKsJNgVIJdBPM5KMFOgtoGOwlabYO9BLUNdhIEqwQ7CXol2EfQGSXYSRCVYCfBpAT7CKLO6n6BIBUYfrQkWQhqNdNJ0GtF3UswKMEmwVBtw2fTgWDUXtxJkHRO0ktQe3EnwaRtsJegtsE+gvnWmxLsJKhrM70EdV7cSdCiEuwkqHfcOwmCrs30EtRZXSdBp2szvQS1oj4lOGBBvX3EYtHal8WiBS2HxWuFwGLR0pPDEjSXs1g0QXNYoq5jsVg0QbNYNEFzWAgVC4dFEzSHJWmCZrHoKg6DBY0W/ywWbS0cFv3ZAo9lqZnI2ePPRSGcYlnsrYcGFm0tHJbF3iRoYFnqwsI8lsWu/DewoGLhsOiQy2FZ7HfmG1iWWvzPY1nsyn8DiyZoDstiV/4bWJa68t/AstSV/3kspDNoFosmaA7LYn+40sCiQy6DxRudQbNYtLWwWJaaoCMWW4hebjwwtEvN5pcwtKE+FNNGc/ojdb/YhxZdk6H25W6Gi33szjUZLnVV9iKGMdWnU5Od5OXFPnrnmgyXOp28IkOvebmf4VKnHtdkqLVNN8OgOaWfodY23QyjtsN+hlrbdDNc7EPJLmKYXD2/hFOGmpe7GV5n8wxLddcfQN9gmOupEn4gOIafP4WjWDeCivH4kNhh85tD+PQ3hx9M+KvDv86ziP5c+L8yfkTXCB9NsbYI8ZOTqTWZWHojGTp+NLu9EdaVLkzHD3a5xw/RA/6B6F2o0Xuajz6SKxsfRUpm3thaJF+HYT+6V/RzL6fI3+ewpo6E1lA6Gdwiv59DQ8TfDchB1WVHG2EiSgKRiwIRgkQUeBHVDb3ATEAEPjyEUYuZeOK/otUSeYkoCUT8l18aoiQ5pyQIjwzbp/O1rRfXR3sqskYiigIRgEREAtGZPRsbIomnM/0pF0ZFFOzpj7PIG4nIC0TBSUQkEEUJiBgEIpLQozP7Ux6rW+cn/SmhRESXixK/AVhLFASiM929IUKJSIA8gcQTSJA7CXInQY5nkIdauDqyE1EQiLyTiEggCigRJYGIXy5qiEiQcxN5iUiQqFMSeLKGLy1jKOVoDDjR8Pkp1UWLFMNUEy7X8CmtoUGBhi6vyYc1GpEqSlRnEmFLJfJFIl8k8pVEvpLElzVOpBL5siBSBYkKjEiFIpWkp5zZ7Xx2jLH8RDRBmZEnnGoE45Lle/G8nyCIjZ+ENjReoEmXMyAUaAR++IXdRKUdfFqRLhq6WAPGCTSxcT6Mxl7e3oB/hsa8ht9/cV7jjEBzeY4GtAKNwI+gFgBBLQBecH3Che3gRz76926/vrvfPL5kxfDm2/bhdb3bfhy+/vdc3rnfrzeb9dPt83738Pjtbf94u9k9DO+tzMefr+DjDUQ65MZ8mAHfWEiH7jMc5nlEnkFkr9nz/w==",
      "brillig_names": [
        "set_minter"
      ]
    },
    {
      "name": "owner_of",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "5V3bbuM4DP2XPOdBlEiRml9ZLAadNh0EKNqilwUWxfz72mntuIkuNTfjseyXQTzgKc+hJIqSbfltc7P78frz+/7+9uF58+2vt83dw/XVy/7hvrl6+7Xd/Hja393tf34f/vfGtP+AdQfA8+PVfXv9/HL19LL5Bs6S2W529zftbyfU/JHb/d2uuYLm97m9sbYzN2gH1jZijd7DhzV6Nr21mIixkKEPYyELQ+O/tw1/uQz/EDpzgDAhf3eh+JP08ZdS/IGYO2vvXJ5/oNCJDd7hKX+ES/MH+5n/wUuYwgth1Ittmq2DWUJX8MJNZ/ow58a+EF3ru4ETrNBpdCl8hdFn3S3OoxKn9Mesw4mN4axj6qLS/OZjxMlEm9W74+AdNA/juxOewEmYQknwv9+JNWYKJziFkzCBE5hCCcgETuxFujBIn2PtcMQ3Ts6tiUKXwL1YHOQHiWXWftpllqOtuAN9Z+qmL1XTR181fYIv0Bcp0UfqB9igLmydRAiRYMfIm0KdwE66scs4KF0kzsOx74mgCSdlhSX+A2r5qNYWambijgfJkbyj9zzlbdXsq449fyX2wQzZtzAxOhjFYWKphwmG/zftBTOFk0mUhN/vxBk3hROewAnYKZxMocTCFE4u0oX/1AzvnKuaPkLd9EPV9Am/QN/jMspDxPieJHUga44enPMxPqGXyiEcc0kzRUWsHXcNhYMNRhvjbi30EbeDrcuoMWG3zUkoQ9ODSF6BSLJrELmGlvRraEm/hpZkWIPINbSkrGFMiqxAZFhDxRPfHqhQpEC/Q2VPRJJZSktmRS5lTOZEwkKyq+9t/WfTVqRbSHfNi1xIMZAViWvorktZNGdFLmXRnBe5hpb0C1lq5UWuoSV5DWOSF1LWZUXKGioeWchSKysy4BpEVjkmG+beVJkyD8yrnNFa5lBlwXFgTrUyt6Za5lUm0APzarNinRsuB+bVZkWsNivGn2qugTlVmxWp2qxIVVb9LXNf7ezvq405V9vPZca5xUH3IJx11p8xn3E/LzCfcT/PM5/zvfUC8xlXXFnmbGZccRWY1zpC2dQ6QhlmPBMVmFcbc1trVuQ5r/3zzN2Md0QLzGe8Ds0zx1prRcZqsyJWO0Ln/OhFgXm1teKc3ywoMJ9xVmwSX8eCSW/cyuQZp9AxMsH3b7QBG3smc8ZZ64IyZSGdtiAzzHgFekmZM16ujpLJoT8STuA004pZSgoqyMR1yFxKps3LnPMLBJeUuZQJJS9zzo95XFLmOiYUt47WdOuYUNxSJpTg+iNwAp7JnPPTIBeUGT9lFEzvAczgZLB3UEhUiAVQfHgA9SU38GnJHRLTeh6UmD0KINKA4rckQPojV6w5C0TiaR08Hp87PNWlA6EGJApQYouoAPIKEGs0iYaeJDbssG9cYjgFpe5l50BgUqunAoo0qNQTyAWU16Csyleqwgl9TvLgzlCp5zYLKNGgUnk+jyJQoVTRSD1plkd5VQwTr1654xziyJ6jWIMSUKFIhQoaVCIDlFCaaICxKpTKF4AKRSqUJvLJL1X4/kw4J3COChpU4n5rAZX6FkIBxRpU4k5ZAeWNCqWYlBuUaFBsVSiNr8Qh9Oy7kpU9nmHis1foj84M7M8xYTwmPt8VMDwek+iz2bodEqd9l1BkVCjSoLzKl1f5YpUvVvkSlS9RtVdQ+QoqXYnDifKoxGHERRRrUAAqlB+dY1x8sRr6s0YDRjDj85KLj+K8H1Jwiy9UCxgZj4kvU/Mx8ONzpmOFH47HWrp+8Gk36AMTr4YLGIWf+Dgf6Ilhxvc3jD+VXMDIeAw4BWb8HI3x9zcLGIUfRS2AiloAUdE+OLIf/Gqu/rl62l/9uNt9fJ3u9vX+evCxupd/H3cn3617fHq43t28Pu3aL9gdP17XdlsrvHVGWi7tpactm0NJ2FyA99umDG18Nn7/Aw==",
      "brillig_names": [
        "owner_of"
      ]
    },
    {
      "name": "get_nft_count",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "3992192655176357659": {
            "error_kind": "string",
            "string": "Function get_nft_count can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHxgAAwACgEguCIBIAAElAAAASyUAAABvLgQAAYBJKAIAAgSASScCAwQBOw0AAgADKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAnQeAgACAB4CAAMAMzgAAgADAAQkAgAEAAAAkyUAAAKdHgIAAgknAgMAAQo4AgMEJAIABAAAAK8lAAACrycCAgAALQgBAycCBAQEABABBAEnAwMEAQAoAwIELQwEBS0OAgUAKAUCBS0OAgUAKAUCBS0OAgUtDQMEACgEAgQtDgQDKwIABAAAAAAAAAAAAgAAAAAAAAAALQgBBScCBgQFABABBgEnAwUEAQAoBQIGLQwGBy0OAgcAKAcCBy0OAgcAKAcCBy0OAgcAKAcCBy0OBActDQMEACgEAgQtDgQDLQ0FBAAoBAIELQ4EBS0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgqARQAFLQgBBgAAAQIBLgqARAAGJwIHABEnAggECS0IAAktDAQKLQwDCy0MBQwtDAYNLQwHDgAQAAgAJQAAAsEtBAAAJwIHBAgtCAAILQwECS0MAwotDAULLQwGDC0MAQ0AEAAHACUAAALBLQQAAC0NBgELKAABgEQAByQCAAcAAAINJwIIBAA8CQEIJwIBBActCAAHLQwECC0MAwktDAUKLQwGCwAQAAEAJQAAA+otBAAALQ0DAQEoAAGARwAELQ0EAwo4AwIBCygAAYBEAAIkAgACAAACXiUAAAT9LwwAAwABHAwBAwQcDAMCABwMAgEEJigAgAQEeAANAAAAgASAAyQAgAMAAAKcKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQU3Zx4RfrXXGzwBAQImJQAAAnQtDQMGLQ0EBwsoAAeARAAIJAIACAAAAucnAgkEADwJAQkLKAAGgEMAByQCAAcAAAN2IwAAAvwtDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADISUAAAUPLgQABoADKACABAQABCUAAAUhLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA2ElAAAFry0OCgEtDgcCLQ4FAy0OCQQjAAAD6ScCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPqLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFIS4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+kmJQAAAnQuCIBFAAUjAAAD+g0oAAWAQwAGJAIABgAABGojAAAEDy0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASIIwAABPQtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUhLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPQtDAYFIwAAA/oqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU8IwAABUcuAIADgAUjAAAFri4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWaLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVpKAGABQQAAQMAgAYAAoAGIwAABa4mKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3dbts6DMffJde5EKkPSnuV4aBou6wIECRF2h7goNi7HyWLFTehrZoKNhTmTVE3+lvUz5JI0Y30vvixenh7ultvf+5eFt++vy82u8f71/Vum6/efy0XD/v1ZrN+uuv/eWEOPwDCUfDyfL89XL+83u9fF9/AojfLxWr74/C7jT7f5Od6s8pXkH+/Lm8Qu+LGYa80MqVdCHAq7QKZUjoapnD0xp8KR4/QL/zPcgEIt7E/pa44QPqT9t+Iv4+Ff6zxB0/UlQ7WjtuffOoam4J1l/Zbd2v7AT/af6jF4R+phdhaMD+2Tobe2UotlDvTqTjl8hW6GLqBkzD6S7oeP2PRx3YfdSTTBWF9ZIQ6z+nQmWhPOnQZZ9F5wz7WYM+Dt/d4yLGdP3S3NucuYG3gHmVy3dillM53xpSY0pa6zuh64wQ5kxGhuzFibwSyhb3rRqt3sV/0QDAaJdhI0CnBRoJJCbYRTNoHWwlqH2wjiEb7YCvBqATbCAIqwUaCpATbCPIZBSU4gWBQgm0Era7qPkEwdskF30t5dQSdEmwkqBF1I0FnlWCVYChlw8eiB4JBR3ErQV2TNBIkHcWtBLUPNhKM2gdbCWofbCSYNDfTSlDXxW0ErdHcTCtBfePeSBA0N9NK0CnBRoKam2kkiBpRXxI8YtHXRxwWq7Evi0UDWg6L0wiBxaKhJ4tFfTmHxauDZrFoHovDEtRBs1jUQXNYSNNILBZ10CwWddAcFv3eBIslafDPYtHewmLRuYXB4mb7lsJCaaDFcIlltq8eKli0t7BY5jq3jGOZbea/gmWumf9xLHauS8UKFp1yWSw65XJYnFMsHBbtLRyW2Wb+K1jmmvkfxzLbzH8Fy1wz/+NYSFfQLBZ10CwWnXI5LFGnXBaLrqA5LLP93kgFy1wdNLmuLJKXF84MvZmrN5/CEEJ0XfvI4BXDufq4GzIEHcvNDGe77c4tGc41KzuJIaWy+3GES7/sZ7v1zi0ZOmXYzFD9cjNDN9elxy0ZamzTzNCrT2lnqLFNM8Og/bCdoVOGzQw1tvkEw2RL+5K7Ykjql5sZ3ubwDIjlVBnsn3HCMvQ+deaHiGfz8104iuWgIaLzJrEQ7W/z/Zc2P9mvbH64zV5Ef8/8z8wfvfOqBswvoxygdxLWoRLGIF+yVxRM5WQkssUQcr3DmiJvh6VQDHE96r8PUgqf2lj+1q2lc2vR1BqQyq0RznbYPMMd7aevbT9+bf7Ef/MCTPFFYGK6cC/E73NUE7GxEYB356ZfJn5p4BS5cdHA0W0VURKI+I2Q86xVxiyaKxB8oA3ufKRYf1roRFEgIpSIgkDEBxw1kaRNSWBe5F1afrbl4XqCKxEJRANDoyJKAhH/TqQi4l8C1ESimgbalErcGuDy63Fx4KDCcdHAWYLjomAkIi8RSUDwezPXRBJ6ceCczvP6wvqr8ZRAIvISUZouSsZKRCQQAUhEAuQJJTWhl4gkyK0EuR1AHsrSwcbLiSUN+NxxEZ+orom8QBRAIgoCEf+/rTWRwOemiBKRwFGnJKgJDB9a5qVYCZPdlYb3T6mkjRKFKw3f9Soamq7xIND46TF5zpIZkcqJVEmiIlFdJKoriuqKorqSpC4wRqSS1SVpV05YiFQkUQ34xJpKMlKAj5xH55iBM8SzV+7GsWM00+cl4EfxeD1BYBu/CB3X8GvQiiZMZxBBoBHUw2+Dk2LXDz68E+g0frIGjRFoXKU9nGZ6f0N+X4pxDZ8oq2im+060VqCJ0zWCWAAFsQAKYgH0gufjJ/aDX/nq3/v9+v5hs3rJisOHb9vH1/Vue7p8/e+5++Rhv95s1k93z/vd4+rH2351t9k9Hj5bmNOP7+hpiRSPvjFfZlhLwHQcPodPKS0xQq411/w/",
      "brillig_names": [
        "get_nft_count"
      ]
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACbHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADEHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA1icCAQADLwwAAQACLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAAwyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF+0Le07wSjQI8AQECJg==",
      "debug_symbols": "7ZVLasMwEIbvorUXmodevUopwUmUYDB2cJxCCbl7pWA5jivqEkJW3RiN+cb/eB6as9j69Wm/qppdexRv72dRt5uyr9omWOdLIdZdVdfVfjV9LWR8GHXlj4eyieaxL7tevAGhkoXwzTaeyarwjV1V+2BBOP/kJWLCJeOExgzNWsNAszZypK3MwFZJNcBWIUzhj0JY+ZzwnUs4gHth+E/KvrJj9u1S9kEZk2hN9Hv4Trn0r04Tz8J39OzwAe/DjyL2BSIg9StUALIqGDojuaFiWlAxoV8H3AR+oYKo02g6tGpWQQD9l4ju/zv6ITzo96Ae8YN+LueHzJT8wpnt6KdyOSSNaYhJ2xsMNjtgaMbbBN3tNsHsOBplORVTy4ViGrKUYJ70VxYGIKPHbmTp5rVn/s9NNjeXYH2WXVWuaz9s0N2p2UwWav918LPdeujajd+eOh+37G3BQtxQ6Ari67gFg1RBJmgEnW8=",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "set_token_uri",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "token_uri_parts",
            "type": {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "string",
                "length": 31
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_token_uri"
      ]
    },
    {
      "name": "get_total_nft_count",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "public"
        },
        "error_types": {
          "7955645436933671353": {
            "error_kind": "string",
            "string": "Function get_total_nft_count can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACqHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADTHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA5ScCAQATLwwAAQACHAwCAwQcDAMBABwMAQIELQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAA0ioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFbmghX8Njibk8AQECJg==",
      "debug_symbols": "5VbbasMwDP0XP+fBkixf+itjlLRNSyAkJU0Ho/TfZ3dxkmZhGaV0lL4EKxz5HOnYRiexyVbH3TIvt9VBLN5OoqjWaZNXpY9O50Ss6rwo8t1y+FvI8DF8wR/2aRnCQ5PWjVgAIctEZOUmrMmy32ObF5mPwK9/4iVihEuFAzROoJXW0KKVNrJDWzkBtiy5BVtGGILfE2HlfeQ7F+EA7oHy79R9tl337Vz3gY2JaE30u3zHLtbqNKmRfEf3lg94LT+Q2AeQgNSPYAGYZEF/MmIasqIZFuPPaws3Hj/jIOp4NR1aHjkIoP+i6LrukIdwY96NfKRuzHNTeahIUpvn19TfS57qIYDiztbBjQdLU/awVdEeLWfsMWSjEKMGJ8ZO6yCjOyFKurGbSr1StSz/oVrTV4tyrgDXbY3Q6yBW3/r5ufXrZ+7/2YcfaZ2nqyJrp6TtsVwPhqbmc5+N5qd9Xa2zzbHOwiTVD1EQGkGYkLk8qSGwiZKew/N8AQ==",
      "brillig_names": [
        "get_total_nft_count"
      ]
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "buy",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1807958972175993320": {
            "error_kind": "string",
            "string": "listing is not active"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3655612186068596320": {
            "error_kind": "string",
            "string": "token not exist"
          },
          "4231505675063574899": {
            "error_kind": "string",
            "string": "seller is not owner"
          },
          "4909854590541973695": {
            "error_kind": "string",
            "string": "buyer cannot be seller"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "buy"
      ]
    },
    {
      "name": "get_public_nfts",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "offset",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "array",
                "length": 50,
                "type": {
                  "kind": "field"
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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KCsp05SykjJNKSsp05SykjJNKSsp04yyBlKmKWUlZZpSVlKmKWUlZZpS1oisM8pKyjSlrKRMU8pKyjSlrKRMU8pKyjSjrJGUaUpZSZmmlJWUaUpZSZmmlDUi64yykjJNKSsp05SykjJNKSsp05SykjLNKGsiZVIiq49pQ1h7ssa2yZqWpX2XlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynTjLJmUqYpZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrKNKOshZRpSllJmaaUlZRpSllJmaaUNSLrjLKSMk0pKynTlLKSMk0pKynTlLKSMs0oayVlmlJWUqYpZSVlmlJWUqYpZY3IOqOspExTykrKNKWspExTykrKNKWspEwzytpImaaUlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynThLLe/jtknVFWUqYpZSVlmlJWUqYpZY3IOqOspExTykrKNKWspExTykrKNKWspEwzyupImaaUlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynTjLJ6UqYpZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrKNKOsgZRpSllJmaaUlZRpSllJmaaUNSLrjLKSMk0pKynTlLKSMk0pKynTlLKSMs0oayRlmlJWUqYpZSVlmlJWUqYpZY3IOqOspExTykrKNKWspExTykrKNKWspEwzyppImaaUlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynTjLJmUqYpZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrKNKOshZRpSllJmaaUlZRpSllJmaaUNSLrjLKSMk0pKynTlLKSMv2+rHlxm6zll4GX3b/e3AblSdZXRVCXtQiKa72t/dLWrf2PLZ62/ikrKdOUspIyzShrJWWaUlZSpillJWWaUlZSpilljcg6o6ykTFPKSso0paykTFPKSso0paykTDPK2kiZppSVlGlIWWMI69ax9h4R5riKmfOjBELdE6c9Hj4uT8PY3zi7bevs09LZ2hWXV963f7fQ++tt452be6rdvQeb9fao9Gvj6rN/3vhnnRO7UecW6pwckjq3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sLtbObZbPbZbO7JbWpZju7lju714OzxtF9ZSnhfQ22vNfFm23z6WpzdW1kPkzx+ifP4Q9fOHaB8/xIvHP6cewn3+EP7zhwifP0T8/CE+f3a7z5/d7vNnt/v82e0+f3b7z5/d/vNnt//82e0/f3b7z5/d/o/P7vtu+dhu5dhu9dhu7dBuYTm2mzu2mz+2Wzi2Wzy227EqCceqJByrknCsSsKxKonHqiQeq5J4rErisSqJx6okHquSeKxK4rEqiceqJB6rknSsStKxKknHqiQdq5J0rErSsSpJx6okHauSdKxK0rEqyceqJB+rknysSvKxKsnHqiQfq5J8rErysSrJx6okH6uScqxKyrEqKceqpByrknKsSsqxKinHqqQcq5JyrErKsSqpx6qkHquSeqxK6rEqqceqpB6rknqsSuqxKqnHqqQeq5J2rErasSppx6qkHauSdqxK2rEqaceqpB2rknasStqhKsnLcmw3d2w3f2y3cGy3eGy3dGy3fGy3cmy3emy3Y1XijlWJO1Yl7liVuGNV4o5ViTtWJe5YlbhjVeKOVYk7ViX+WJX4Y1Xij1WJP1Yl/liVHMte87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXvOx7DUfy17zsew1H8te87HsNR/LXsux7LUcy17Lsey1HMtey7HstRzLXsux7LUcy17Lsey1vMhe2/bynmvRfd/tVfZatiXWW/O/7Lb3/a6zvg5cXmW6UsPxuoYTdA0n6hpO0jWcrGs4Rddwqq7hNFXD8bquyl7XVdnruip7XVdlr+uq7HVdlb2uq7LXdVX2V1+V33/YvvimazxhUTYep2w8Xtl4grLx/PG1+b5bOrZbPrbb7jXJu+0zlN671IHmblny9vmmW2T7WFhnb6UDX8O6iExYnhbh2f/beVm2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",
      "brillig_names": [
        "get_public_nfts"
      ]
    },
    {
      "name": "get_mint_price",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "9542695600093932550": {
            "error_kind": "string",
            "string": "Function get_mint_price can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACqHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADTHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA5ScCAQAXLwwAAQACHAwCAwYcDAMBABwMAQIGLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAA0ioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFhG53FsNILAY8AQECJg==",
      "debug_symbols": "5VbRasMwDPwXP+fBki1b3q+MUdI2LYGQlDQdjNJ/n93FaZqZZZTSUfZSrHLKnXS20FGsi+VhuyjrTbMXL69HUTWrvCub2kfHUyaWbVlV5XYx/lvI8GPpjN/v8jqE+y5vO/ECCklmoqjX4ayY/Dc2ZVX4CPz5O14iRrjUOEJjAq2NgR6tjZUDmmUCzCSpBzMhjMFvmWB5H/nORTiAe6D8O3WfeOg+z3UfyNqINkr9LN+Ri7U6o/REvlP3lg94LT+Q8ANIQJpHsAAkWdDfjJiGpNUMi/X3tYdbj59xEE18mg6ZJg4CmN8ouq475CHcmHcjn9I35rlUHqIenqU/Iw95lOohgKbB1tGLB1Ype4h1tMfIGXusYhXBenRjOK1DWTMI0dJN3dT6P1VL8g+qtZdqcWb2g4HRpL0MT0X6Sz89t37zzP0/+fA9b8t8WRX9lrQ51KvR0tR97IrJ/rRrm1WxPrRF2KQuSxSERijMlD2P1BBwpqXn8Dyf",
      "brillig_names": [
        "get_mint_price"
      ]
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "finalize_transfer_to_private"
      ]
    },
    {
      "name": "get_max_supply",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14173247481526980905": {
            "error_kind": "string",
            "string": "Function get_max_supply can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACqHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADTHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA5ScCAQAWLwwAAQACHAwCAwQcDAMBABwMAQIELQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAA0ioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFxLF9fcodkSk8AQECJg==",
      "debug_symbols": "5VbbasMwDP0XP+fBkiVf9itjlLRNSyAkJU0Ho/TfZ3dxmmZmGaV0lL0EKxz5HOnYRkexLpaH7aKsN81evLweRdWs8q5sah8dT5lYtmVVldvF+LeQ4WP4jN/v8jqE+y5vO/ECCllmoqjXYa0s+z02ZVX4CPz6O14iRrgkHKExgSatoUeTNnJAW5kAW5bcgy0jjMFvmbDyPvKdi3AA90D5d+o+26H7dq77wMZEtFbqZ/mOXazVaUUT+U7dWz7gtfxAYh9AAlI/ggUgyYL+ZMQ0ZFIzLMaf1x5uPH7GQdTxajq0PHEQQP9G0XXdIQ/hxrwb+RTdmOdSeUjgolFIOLqXnOohAPFg6+jGg1Upe9hStEfLGXuMsiqCaXRibFqHMnoQQtJN3ST6T9Wy/INqzaValHMFuGFrhIsOxfSln59bv37m/p98+J63Zb6sin5K2hzq1Who6j52xWR+2rXNqlgf2iJMUpchCkIjFGbKnJ/UENiMpOfwPJ8=",
      "brillig_names": [
        "get_max_supply"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "erc20_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "is_mint_public",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "mint_limit_per_wallet",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "max_supply",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "mint_price",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICRJwAABAMnAgkERCcCCgQAHxgACgAJgE0dAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgI2AjQEdAICOgI4EHQCAj4CPBB0AgJCAkAYuCIBNAAEoAgACBIBOJwIKBB8tCAEJJwILBCAAEAELAScDCQQBACgJAgsuBAACgAMuBAALgAQuBAAKgAUlAAACry0MCQIoAgADBIBtJwIKBB8tCAEJJwILBCAAEAELAScDCQQBACgJAgsuBAADgAMuBAALgAQuBAAKgAUlAAACry0MCQMuCICMAAQuCICNAAUuCICOAAYuCICPAAcuCICQAAglAAAC9SUAAANMKAIAAQSAkScCAgQAOw0AAQACAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAAL0LgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAAALDJikAgEMAO5rKACgAgEQEAAMoAIBFAQAAKACARgQAACgAgEcAAAAoAIBIAQABKACASQQAASgAgEoAAAEoAIBLAN6tKwCATAAAAAAAAAAAAQAAAAAAAAAAJiUAAAy1LQgBCgAAAQIBLgqARQAKLQgBCwAAAQIBLgqARwALLQgBDAAAAQIBJwINAAItDg0MHgIADQA2OAANAA4ADwAcDA8QAAQ4EA4RJAIADwAAA6onAg4EADwJAQ42OAANAA4ADwIcDA8NAAQ4DQ4QJAIADwAAA84nAg0EADwJAQ0tCAENJwIOBAIAEAEOAScDDQQBACgNAg4fJIBGgEkADgEoAA2ASQAPLQ0PDhwMDg8EHAwPDQAnAg4ERC0IAQ8nAhIERQAQARIBJwMPBAEAKA8CEh80gEkADgASJwISACwtCAETJwIUBEYAEAEUAScDEwQBACgTAhQnAhUERQA4FRQVLQwUFgw4FhUXFgwXFyQCABcAAARzLQ4SFgAoFgIWIwAABFQtCAESAAABAgEtDhMSJwITBEUuCIBGAAkjAAAEkAw4CQ4UJAIAFAAADFYjAAAEoi0NEg4tDQ4PACgPAg8tDg8OKwIADwAAAAAAAAAARQAAAAAAAAAAJwIXBBgtCAAYLQwPGQAQABcAJQAADN4tBAAALQwZEi0MGhQtDBsVLQwcFi0NEg8AKA8CDy0ODxItDRQPACgPAg8tDg8ULQgBDwAAAQIBLQ4SDy0IARIAAAECAS0OFBItCAEUAAABAgEtDhUULQgBFQAAAQIBLQ4WFS4IgEYACSMAAAVMDDgJExYkAgAWAAAMDCMAAAVeJwITBBYtCAAWLQwPFy0MEhgtDBQZLQwVGgAQABMAJQAADX4tBAAALQwXDicCDwANLQgBEicCEwQEABABEwEnAxIEAQAoEgITLQwTFC0ODxQAKBQCFC0ODRQAKBQCFC0ODhQtDRINACgNAg0tDg0SKwIADQAAAAAAAAAAAwAAAAAAAAAAJwIWBBctCAAXLQwNGAAQABYAJQAADN4tBAAALQwYDi0MGRMtDBoULQwbFS0NDg0AKA0CDS0ODQ4tDRMNACgNAg0tDg0TLQgBDQAAAQIBLQ4ODS0IAQ4AAAECAS0OEw4tCAETAAABAgEtDhQTLQgBFAAAAQIBLQ4VFC4IgEYACSMAAAZmDSgACYBEABUkAgAVAAALwiMAAAZ7JwISBBUtCAAVLQwNFi0MDhctDBMYLQwUGQAQABIAJQAADX4tBAAALQwWCQo4EAkNJAIADQAABrglAAAN8gsoABGARwAJHgIADQEKOBENDhI4CQ4NJAIADQAABtwlAAAOBAsoAAGARwAJCygACYBFAA0kAgANAAAG+SUAAA4WJwIJAAUwDAABAAkrAgAJAAAAAAAAAAACAAAAAAAAAAAnAhIEEy0IABMtDAkUABAAEgAlAAAM3i0EAAAtDBQNLQwVDi0MFhAtDBcRLQ0NCQAoCQIJLQ4JDS0NDgkAKAkCCS0OCQ4tCAEJAAABAgEtDg0JLQgBDQAAAQIBLQ4ODS0IAQ4AAAECAS0OEA4tCAEQAAABAgEtDhEQJwIRAAYnAhIEEy0IABMtDAkULQwNFS0MDhYtDBAXLQwRGAAQABIAJQAADigtBAAAJwIRBBItCAASLQwJEy0MDRQtDA4VLQwQFi0MARcAEAARACUAAA4oLQQAACcCEgQTLQgAEy0MCRQtDA0VLQwOFi0MEBcAEAASACUAAA1+LQQAAC0MFBELKAARgEcACQsoAAmARQANJAIADQAACDUlAAAPUTAIgEoAEScCDQQQLQgAEC0MAhEuCIBIABIAEAANACUAAA9jLQQAAC0MEQknAgIAAycCDQQQLQgAEC0MChEtDAsSLQwMEy0MAhQtDAkVABAADQAlAAAQUi0EAAAnAgkEEC0IABAtDAMRLgiASAASABAACQAlAAAPYy0EAAAtDBECJwIDBBAtCAAQLQwKES0MCxItDAwTLgiASgAULQwCFQAQAAMAJQAAEFItBAAAJwICAjAtCAEDJwIJBCAAEAEJAScDAwQBACgDAgknAg0EHwA4DQkNLQwJDgw4Dg0QFgwQECQCABAAAAksLQ4CDgAoDgIOIwAACQ0nAgkEEC0IABAtDAMRLgiASAASABAACQAlAAAPYy0EAAAtDBECLQ0DCQAoCQIJLQ4JAycCDQQQLQgAEC0MAxEuCIBIABIAEAANACUAAA9jLQQAAC0MEQknAg0EEC0IABAtDAIRABAADQAlAAARkS0EAAAtDBEDASgAA4BJAA0tDQ0CJwINBBAtCAAQLQwJEQAQAA0AJQAAEZEtBAAALQwRAwEoAAOASQANLQ0NCScCAwALMAwAAgADJwICAAwwDAAJAAIpAgACADuayg0vDAACAAMLKAADgEcACSQCAAkAAAoTJQAAEcgwCIBLAAInAg4EEC0IABAuCIBMABEAEAAOACUAAAzeLQQAAC0MEQItDBIDLQwTCS0MFA0tDQIOACgOAg4tDg4CLQ0DDgAoDgIOLQ4OAy0IAQ4AAAECAS0OAg4tCAECAAABAgEtDgMCLQgBAwAAAQIBLQ4JAy0IAQkAAAECAS0ODQknAg0EEC0IABAtDA4RLQwCEi0MAxMtDAkULQwEFQAQAA0AJQAADigtBAAAJwIQBBEtCAARLQwOEi0MAhMtDAMULQwJFQAQABAAJQAADX4tBAAALQwSDTAMAAQADycCAgAOMAwADQACJwICABAwDAABAAInAgEAEycCAgQNLQgADS0MCg4tDAsPLQwMEC0MAREuCIBGABIAEAACACUAABHaLQQAABwMBQEAJwICABQwDAABAAInAgEAFScCAgQNLQgADS0MCg4tDAsPLQwMEC0MAREtDAYSABAAAgAlAAAR2i0EAAAnAgEAFicCAgQNLQgADS0MCg4tDAsPLQwMEC0MAREtDAcSABAAAgAlAAAR2i0EAAAcDAgBACcCAgAXMAwAAQACHgIAAQA0AgABJgAoEgIWADgWCRctDRcVJwIWBBctCAAXLQwNGC0MDhktDBMaLQwUGy0MFRwAEAAWACUAAA4oLQQAAAEoAAmASQAVLQwVCSMAAAZmACgOAhcAOBcJGC0NGBYnAhcEGC0IABgtDA8ZLQwSGi0MFBstDBUcLQwWHQAQABcAJQAADigtBAAAASgACYBJABYtDBYJIwAABUwtDRIUASgACYBJABUAKA8CFwA4FwkYLQ0YFgw4FRMXJAIAFwAADIIlAAAR6y4EABSAAygAgAQEAEYlAAAR/S4IgAUAFwAoFwIYADgYFRktDhYZLQ4XEi0MFQkjAAAEkCgAgAQEeAANAAAAgASAAyQAgAMAAAzdKgEAAQX3ofOvpa3UyjwBAQImJQAADLUtCAECJwIDBAQAEAEDAScDAgQBACgCAgMtDAMELgqARwAEACgEAgQuCoBHAAQAKAQCBC4KgEcABC0NAgMAKAMCAy0OAwItCAEDJwIEBAUAEAEEAScDAwQBACgDAgQtDAQFLgqARwAFACgFAgUuCoBHAAUAKAUCBS4KgEcABQAoBQIFLQ4BBS4IgEUABC0MAgEtDAMCLgiARgADJiUAAAy1LQ0EBQsoAAWARQAGJAIABgAADaAnAgcEADwJAQcnAgUEBi0IAAYtDAEHLQwCCC0MAwktDAQKABAABQAlAAASiy0EAAAtDQEFLQ0CBi0NAwctDgUBLQ4GAi0OBwMuCoBIAAQBKAAGgEkAAi0NAgEmKgEAAQX0gAGmWdMnQjwBAQImKgEAAQUfAFASQCQi7jwBAQImKgEAAQUFD4YEI+0WWTwBAQImJQAADLUtDQMGLQ0EBwsoAAeARQAIJAIACAAADk4nAgkEADwJAQkLKAAGgEQAByQCAAcAAA7dIwAADmMtDQEGLQ0CBy0NAwgtDQQJDSgACIBEAAokAgAKAAAOiCUAABHrLgQABoADKACABAQABCUAABH9LgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEkABQ44CAUGJAIABgAADsglAAATni0OCgEtDgcCLQ4FAy0OCQQjAAAPUCcCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAABKLLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAR/S4IgAUACQAoCQIKASgACoBGAAstDgULLQ4JAS0OBwIuCoBJAAMtDggEIwAAD1AmKgEAAQUC3G4ngHYSnTwBAQImJQAADLUtCAEEAAABAgEuCoBHAAQtCAEFAAABAgEuCoBKAAUnAgYEHygCAAcAAQAuCIBGAAMjAAAPnQw4AwYIJAIACAAAD7QjAAAPry0NBAEmLQgBCAAAAQIBLQ4DCCQCAAIAAA/OIwAAD/kCOAYDCQMoAAmASQAKDzCASQAJAAskAgALAAAP8CUAABOwLQ4KCCMAAA/5LQ0ECS0NCAoMOAoGCCQCAAgAABATJQAAEesAKAECCwA4CwoMLQ0MCBwMCAoALQ0FCAQ4CggLADgJCwotDgoEBDgIBwktDgkFASgAA4BJAAgtDAgDIwAAD50lAAAMtQEwgEMABAAGLwwABgAHCygAB4BHAAgkAgAIAAAQeiUAABHIMAiASwAGJwIHBAgtCAAILQwFCQAQAAcAJQAAEZEtBAAALQwJBicCCgQLLQgACy4IgEwADAAQAAoAJQAADN4tBAAALQwMBS0MDQctDA4ILQwPCS0NBQoAKAoCCi0OCgUtDQcKACgKAgotDgoHLQgBCgAAAQIBLQ4FCi0IAQUAAAECAS0OBwUtCAEHAAABAgEtDggHLQgBCAAAAQIBLQ4JCAEoAAaASQALLQ0LCScCBgQLLQgACy0MCgwtDAUNLQwHDi0MCA8tDAkQABAABgAlAAAOKC0EAAAnAgsEDC0IAAwtDAoNLQwFDi0MBw8tDAgQABAACwAlAAANfi0EAAAtDA0GMAwACQAEASgABIBKAAUwDAAGAAUmJQAADLUtCAECJwIDBAIAEAEDAScDAgQBACgCAgMtDAMELQ4BBC0NAgEAKAECAS0OAQItDAIBJioBAAEFHwotJ9yCh6I8AQECJiUAAAy1HAwFBgAwDAAGAAQmKgEAAQXFa8RaDhAAAjwBAQImLgGAA4AGCwCABgACgAckAIAHAAASGCMAABIjLgCAA4AFIwAAEoouAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAASdi4BgAqACC4CgAiACwEAgAoAAoAKAQCACwACgAsjAAASRSgBgAUEAAEDAIAGAAKABiMAABKKJiUAAAy1LgiARgAFIwAAEpsNKAAFgEQABiQCAAYAABMLIwAAErAtDQEFLQ0CBi0NAwctDQQIJwIJBAQtCAEKJwILBAUAEAELAScDCgQBACgGAgsnAgwEBAAoCgINPw8ACwANLQ0KBgAoBgIGLQ4GCi0OBQEtDgoCLQ4HAy0OCAQmLQ0DBgw4BQYHASgABYBJAAYkAgAHAAATKSMAABOVLQ0BBy0NAggtDQMJLQ0ECgAoCAIMADgMBQ0tDQ0LACgHAg0AOA0FDi0NDgwAOAsMDS4EAAiAAygAgAQEAAUlAAAR/S4IgAUACwAoCwIMADgMBQ4tDg0OLQ4HAS0OCwItDgkDLQ4KBCMAABOVLQwGBSMAABKbKgEAAQVFp8pxGUHkFTwBAQImKgEAAQUohpKwR9z9QzwBAQIm",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACbHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADEHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA1icCAQAFLwwAAQACLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAAwyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFi40qC3IiUlA8AQECJg==",
      "debug_symbols": "5ZXBasMwDIbfxeccLEuy5b3KGCVt0xIISUnTwSh99zklTtPMLKOUXnYJUfiU/7dkobPaFuvTflXWu+ao3t7Pqmo2eVc2dYjOl0yt27Kqyv1q+lnp/uH4yh8Ped2Hxy5vO/UGaFhnqqi3/TsKh3/syqoIEYT3n7w2JuKazIQ2CZqshYEm6/RIi07AwpoHWNjAFP7IlOjn2Pc+4gD+hfafVH2WsfqyVH1g5yJtEX+379nHs3qLNLPv8dn2wdzb70XkBSKg7StUAJIqJtyMmGaYcEHFhfs64C7wCx00No6mN8KzDgLYvzi6P3efZ+DBvAf1kB7M86k8QyJxLA15fas4p2oIQDy2dTLxIJhqDwvF9li90B6HghGmyY2RtA90djRC2s+7SfRvTnsJ0Wfelvm6KoYttzvVm8nS674OxWz/HdpmU2xPbdFvwtsShH6LGJ8hXUciBMgZuqARdL4B",
      "brillig_names": [
        "get_admin"
      ]
    },
    {
      "name": "set_fee_recipient",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "7035514165980004842": {
            "error_kind": "string",
            "string": "invalid recipient"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAAC+HgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADnJwICAAUvDAACAAMeAgACAQo4AwIEJAIABAAAAJElAAAA+ScCAgAACjgBAgMnAgIBAAo4AwIEJAIABAAAALIlAAABCycCAgAQMAwAAQACJigAgAQEeAANAAAAgASAAyQAgAMAAADmKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQImKgEAAQVhoyrbs3eB6jwBAQIm",
      "debug_symbols": "5VbRiqtADP0Xn31IJskks79yuSy2tYsgttj2wqXsv9+xdNTruhWk9GVfyqSc4zmJk5hrtis3l4/3qtkfTtnbr2tWH7bFuTo0Mbp+5tmmreq6+ngf/51B96Nyw5+ORdOFp3PRnrM3JCeQZ2Wz685kEp+xr+oyRhjPX/HgXIIDuxHazaDZe7yj2Sv0aIMZsAnIHWzicAz+nWcGz7EfQoIjhhfaf1L1xfrq21L1UVQT2hM9th8kpFyDJ57YD/Rs++j+t9+J2AtEEPwrVBDnVByxpvaJ5zBcKZl7J4gsvcjo/qHRDFrF+I5WD/L4dSsZJTCP/Nu8D1LfG2EIk9uB6H9Sts59k23wfbaC/DhbNkr+2dgtzZa+kCamXwzpcvkFdWyoo5FbRWNYR5N5mvgRTcPjqglxajshP4w0Z3gTEXiFyLeZ4CBiOC2Ah3W0dWpK62g2T/NIPc3zUiczJBFkpwudbECpbyxO1YVONkofcLUAS53MNowUcX7aOEY/JtvPGP0p2qrY1OV9V9xfmu1odTz/PZaTLfLYHrbl7tKW3T45rJLY3WSSnOE2/GPAmnOIGlHnHw==",
      "brillig_names": [
        "set_fee_recipient"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "NFTNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "token_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "NFT"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_nfts",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "nft_exists",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_owners",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_uris",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "base_uri",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "erc20_token",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "listings",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "fee_recipient",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000010"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "owner_nft_count",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "nft_mint_count",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_nft_count",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "is_mint_public",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000014"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "mint_limit_per_wallet",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000015"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "max_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000016"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "mint_price",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "seller",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "buyer",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "collection",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::ListingSold"
        },
        {
          "fields": [
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::MetadataUpdate"
        },
        {
          "fields": [
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "seller",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::ListingCancelled"
        },
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "collection",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::NFTTransfer"
        },
        {
          "fields": [
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "seller",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "price",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            },
            {
              "name": "collection",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::ListingCreated"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "token_uri_parts",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "string",
                        "length": 31
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_token_uri_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_token_uri_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finish_transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finish_transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_mint_limit",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_mint_limit_per_wallet_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_mint_limit_per_wallet_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "is_mint_public",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_mint_type_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_mint_type_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::get_token_uri_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "fields": [
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "compressed_string::field_compressed_string::FieldCompressedString"
                }
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_token_uri_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "commitment",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::nft_note::PartialNFTNote"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::finalize_transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::get_nft_count_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_nft_count_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_total_nft_count_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_total_nft_count_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_store_nft_set_partial_note_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_store_nft_set_partial_note_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "base_uri_parts",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "string",
                        "length": 31
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_base_uri_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_base_uri_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::owner_of_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::owner_of_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_price",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_mint_price_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_mint_price_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "erc20_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "is_mint_public",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "mint_limit_per_wallet",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "max_supply",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "mint_price",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_mint_price_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_mint_price_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::cancel_listing_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::cancel_listing_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "approve",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_minter_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_fee_recipient_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_fee_recipient_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::is_minter_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::is_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::buy_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::buy_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_max_supply_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_max_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "price",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::create_listing_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::create_listing_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::is_mint_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::is_mint_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_uri_parts",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "string",
                        "length": 31
                      }
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::mint_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "102": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "103": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "107": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "108": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "109": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/events.nr",
      "source": "use super::utils::{compute_event_selector, get_trait_impl_method};\nuse protocol_types::meta::generate_serialize_to_fields;\n\ncomptime fn generate_event_interface(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let (serialization_fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let content_len = serialization_fields.len();\n\n    let event_type_id = compute_event_selector(s);\n\n    let from_field = get_trait_impl_method(\n        quote { crate::protocol_types::abis::event_selector::EventSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    quote {\n        impl aztec::event::event_interface::EventInterface<$content_len> for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                $from_field($event_type_id)\n            }\n\n            fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n                _emit(self);\n            }\n        }\n    }\n}\n\npub comptime fn event(s: TypeDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n"
    },
    "111": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "112": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "115": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "117": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "118": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "119": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "121": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "122": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "124": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "125": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "126": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "127": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "134": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "135": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "140": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "142": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "145": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "148": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "149": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "151": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "154": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "155": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "156": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "157": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "158": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "159": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "163": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "164": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "165": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "166": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "167": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "169": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "171": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "172": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "174": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "180": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "182": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "183": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "196": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::ToField;\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "197": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "198": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "200": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "201": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "202": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "203": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "204": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "206": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "208": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "209": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "212": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "236": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "238": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "281": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "296": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "298": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "299": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "300": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "309": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "313": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "315": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "316": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "325": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "336": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "350": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "354": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "355": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "371": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "372": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "374": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "380": {
      "path": "/Users/satyam/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "382": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "400": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/Users/satyam/web3/noir/raven-house/contracts/nft_contract/src/main.nr",
      "source": "mod types;\nmod test;\nuse dep::aztec::macros::aztec;\n\n// Raven House NFT contract\n#[aztec]\npub contract NFT {\n    global TOKEN_URI_SIZE_IN_FIELD: u32 = 2;\n    global MAX_NFTS_PER_PAGE: u32 = 50;\n    use crate::types::nft_note::{NFTNote, PartialNFTNote};\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        event::event_interface::EventInterface,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, utility, view},\n            storage::storage,\n        },\n        messages::logs::note::encode_and_encrypt_note,\n        note::{constants::MAX_NOTES_PER_PAGE, note_interface::NoteProperties},\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, NoteViewerOptions, PrivateContext, PrivateSet,\n            PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::traits::{Packable, Serialize, ToField},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    use dep::token::Token;\n    use std::meta::derive;\n\n    // TODO(#8467): Rename this to Transfer - calling this NFTTransfer to avoid export conflict with the Transfer event\n    // in the Token contract.\n    #[derive(Serialize)]\n    #[event]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n        collection: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct MetadataUpdate {\n        token_id: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct ListingCreated {\n        token_id: Field,\n        seller: AztecAddress,\n        price: u128,\n        collection: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct ListingCancelled {\n        token_id: Field,\n        seller: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct ListingSold {\n        token_id: Field,\n        seller: AztecAddress,\n        buyer: AztecAddress,\n        collection: AztecAddress,\n    }\n\n    #[derive(Serialize, Packable)]\n    struct Listing {\n        seller: AztecAddress,\n        price: u128,\n        active: bool,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        admin: PublicMutable<AztecAddress, Context>,\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        token_uris: Map<Field, PublicMutable<[FieldCompressedString; TOKEN_URI_SIZE_IN_FIELD], Context>, Context>,\n        base_uri: PublicMutable<[FieldCompressedString; TOKEN_URI_SIZE_IN_FIELD], Context>,\n        erc20_token: PublicImmutable<AztecAddress, Context>,\n        listings: Map<Field, PublicMutable<Listing, Context>, Context>,\n        fee_recipient: PublicMutable<AztecAddress, Context>,\n        owner_nft_count: Map<AztecAddress, PublicMutable<u32, Context>, Context>,\n        nft_mint_count: Map<AztecAddress, PublicMutable<u32, Context>, Context>,\n        total_nft_count: PublicMutable<u32, Context>,\n        is_mint_public: PublicMutable<bool, Context>,\n        mint_limit_per_wallet: PublicMutable<u32, Context>,\n        max_supply: PublicMutable<u32, Context>,\n        mint_price: PublicMutable<u128, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(\n        admin: AztecAddress,\n        name: str<31>,\n        symbol: str<31>,\n        erc20_token: AztecAddress,\n        is_mint_public: bool,\n        mint_limit_per_wallet: u32,\n        max_supply: u32,\n        mint_price: u128,\n    ) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        storage.base_uri.write(\n            [FieldCompressedString::from_string(\"0000000000000000000000000000000\"); 2],\n        );\n        storage.erc20_token.initialize(erc20_token);\n        storage.fee_recipient.write(admin);\n        storage.total_nft_count.write(0);\n        storage.is_mint_public.write(is_mint_public);\n        storage.mint_limit_per_wallet.write(mint_limit_per_wallet);\n        storage.max_supply.write(max_supply);\n        storage.mint_price.write(mint_price);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_uri_parts: [str<31>; 2], nonce: Field) {\n        let is_mint_public = storage.is_mint_public.read();\n        let sender = context.msg_sender();\n\n        // If the caller is the admin or a minter, they can mint for free\n        let is_admin_or_minter =\n            (storage.admin.read() == sender) | (storage.minters.at(sender).read() == true);\n\n        // If public minting is enabled and the caller is not an admin or minter, they need to pay\n        if is_mint_public & !is_admin_or_minter {\n            // Get the mint price\n            let price = storage.mint_price.read();\n\n            // If price is greater than 0, payment is required\n            if price > 0 {\n                // Transfer the payment from the sender to the fee recipient\n                let fee_recipient = storage.fee_recipient.read();\n                let erc20_token = storage.erc20_token.read();\n\n                Token::at(erc20_token).transfer_in_public(sender, fee_recipient, price, nonce).call(\n                    &mut context,\n                );\n            }\n        } else if !is_mint_public {\n            // If public minting is disabled, only minters can mint\n            assert(storage.minters.at(sender).read(), \"caller is not a minter\");\n        }\n\n        // Check mint limits\n        let already_mint_count = storage.nft_mint_count.at(to).read();\n        let mint_limit_per_wallet = storage.mint_limit_per_wallet.read();\n        assert(already_mint_count < mint_limit_per_wallet, \"mint limit per wallet exceeded\");\n\n        let max_supply = storage.max_supply.read();\n        let total_nft_count = storage.total_nft_count.read();\n        assert(total_nft_count < max_supply, \"max supply limit reached\");\n        let token_id = (total_nft_count + 1) as Field;\n\n        storage.nft_exists.at(token_id).write(true);\n        storage.public_owners.at(token_id).write(to);\n\n        storage.token_uris.at(token_id).write([\n            FieldCompressedString::from_string(token_uri_parts[0]),\n            FieldCompressedString::from_string(token_uri_parts[1]),\n        ]);\n\n        storage.listings.at(token_id).write(\n            Listing { seller: AztecAddress::zero(), price: 0, active: false },\n        );\n\n        let nft_count = storage.owner_nft_count.at(to).read();\n        storage.owner_nft_count.at(to).write(nft_count + 1);\n\n        // Update total nft count\n        storage.total_nft_count.write(token_id as u32);\n\n        // update nft mint count\n        storage.nft_mint_count.at(to).write(already_mint_count + 1);\n\n        MetadataUpdate { token_id }.emit(encode_event(&mut context));\n    }\n\n    #[public]\n    fn create_listing(token_id: Field, price: u128) {\n        let seller = context.msg_sender();\n        assert(storage.nft_exists.at(token_id).read(), \"token not exist\");\n        let owner = storage.public_owners.at(token_id).read();\n        assert(owner.eq(seller), \"caller is not owner\");\n        assert(price > 0, \"price should greater than 0\");\n\n        let listing = Listing { active: true, seller, price };\n        storage.listings.at(token_id).write(listing);\n        ListingCreated { token_id, seller, price, collection: context.this_address() }.emit(\n            encode_event(&mut context),\n        );\n    }\n\n    #[public]\n    fn cancel_listing(token_id: Field) {\n        let sender = context.msg_sender();\n        assert(storage.nft_exists.at(token_id).read(), \"token not exist\");\n        let listing = storage.listings.at(token_id).read();\n        assert(listing.active, \"listing is not active\");\n        assert(listing.seller.eq(sender), \"caller is not the seller\");\n\n        let updated_listing =\n            Listing { seller: listing.seller, price: listing.price, active: false };\n        storage.listings.at(token_id).write(updated_listing);\n\n        ListingCancelled { token_id, seller: listing.seller }.emit(encode_event(&mut context));\n    }\n\n    #[public]\n    fn buy(token_id: Field, nonce: Field) {\n        let buyer = context.msg_sender();\n        assert(storage.nft_exists.at(token_id).read(), \"token not exist\");\n\n        let listing = storage.listings.at(token_id).read();\n        assert(listing.active, \"listing is not active\");\n        assert(!listing.seller.eq(buyer), \"buyer cannot be seller\");\n\n        let owner = storage.public_owners.at(token_id).read();\n        assert(owner.eq(listing.seller), \"seller is not owner\");\n\n        // TODO: Implement fee logic\n        let erc20_token = storage.erc20_token.read();\n        Token::at(erc20_token).transfer_in_public(buyer, listing.seller, listing.price, nonce).call(\n            &mut context,\n        );\n        storage.public_owners.at(token_id).write(buyer);\n\n        // update nft count for buyer and seller\n        let nft_count_buyer = storage.owner_nft_count.at(buyer).read();\n        let nft_count_seller = storage.owner_nft_count.at(listing.seller).read();\n        storage.owner_nft_count.at(buyer).write(nft_count_buyer + 1);\n        storage.owner_nft_count.at(listing.seller).write(nft_count_seller - 1);\n\n        let updated_listing =\n            Listing { seller: listing.seller, price: listing.price, active: false };\n        storage.listings.at(token_id).write(updated_listing);\n\n        NFTTransfer {\n            from: listing.seller,\n            to: buyer,\n            token_id,\n            collection: context.this_address(),\n        }\n            .emit(encode_event(&mut context));\n\n        ListingSold { seller: listing.seller, token_id, buyer, collection: context.this_address() }\n            .emit(encode_event(&mut context));\n    }\n\n    #[public]\n    fn set_base_uri(base_uri_parts: [str<31>; 2]) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.base_uri.write([\n            FieldCompressedString::from_string(base_uri_parts[0]),\n            FieldCompressedString::from_string(base_uri_parts[1]),\n        ]);\n    }\n\n    // New function to set token URI (admin only)\n    #[public]\n    fn set_token_uri(token_id: Field, token_uri_parts: [str<31>; 2]) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n\n        storage.token_uris.at(token_id).write([\n            FieldCompressedString::from_string(token_uri_parts[0]),\n            FieldCompressedString::from_string(token_uri_parts[1]),\n        ]);\n\n        // Emit metadata update event\n        // context.emit_public_log(token_id);\n    }\n\n    #[public]\n    #[view]\n    fn get_token_uri(token_id: Field) -> pub [FieldCompressedString; 2] {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n\n        let base_uri_parts = storage.base_uri.read();\n        let token_specific_uri_parts = storage.token_uris.at(token_id).read();\n\n        // If token URI is empty, return base URI\n        let result_uri = if token_specific_uri_parts[0].is_eq(FieldCompressedString::from_string(\n            \"0000000000000000000000000000000\",\n        )) {\n            [base_uri_parts[0], base_uri_parts[1]]\n        } else {\n            [token_specific_uri_parts[0], token_specific_uri_parts[1]]\n        };\n        result_uri\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        // Handle NFT Count\n        let to_nft_count = storage.owner_nft_count.at(to).read();\n        let from_nft_count = storage.owner_nft_count.at(from).read();\n        storage.owner_nft_count.at(to).write(to_nft_count + 1);\n        storage.owner_nft_count.at(from).write(from_nft_count - 1);\n        public_owners_storage.write(to);\n    }\n\n    // Transfers token with `token_id` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n        let partial_note = _prepare_private_balance_increase(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, partial_note).enqueue(&mut context);\n    }\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// `finalize_transfer_to_private. Returns a hiding point slot.\n    // docs:start:prepare_private_balance_increase\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress) -> PartialNFTNote {\n        _prepare_private_balance_increase(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> PartialNFTNote {\n        // We create a partial note with unpopulated/zero token id for 'to'\n        let partial_note = NFTNote::partial(\n            to,\n            storage.private_nfts.at(to).storage_slot,\n            context,\n            to,\n            context.msg_sender(),\n        );\n\n        NFT::at(context.this_address())._store_nft_set_partial_note(partial_note).enqueue(context);\n\n        partial_note\n    }\n    // docs:end:prepare_private_balance_increase\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    // docs:start:store_payload_in_transient_storage_unsafe\n    #[public]\n    #[internal]\n    fn _store_nft_set_partial_note(partial_note: PartialNFTNote) {\n        // We store the partial note in a slot equal to its commitment. This is safe because the commitment is computed\n        // using a generator different from the one used to compute storage slots, so there can be no collisions.\n        // We could consider storing all pending partial notes in e.g. some array, but ultimately this is pointless: all\n        // we need to verify is that the note is valid.\n        context.storage_write(partial_note.commitment(), true);\n    }\n    // docs:end:store_payload_in_transient_storage_unsafe\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    // docs:start:finalize_transfer_to_private\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, partial_note: PartialNFTNote) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, partial_note, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        partial_note: PartialNFTNote,\n    ) {\n        _finalize_transfer_to_private(from, token_id, partial_note, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        partial_note: PartialNFTNote,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // We verify that the partial note we're completing is valid (i.e. it uses the correct state variable's storage\n        // slot, and it is internally consistent). We *could* clear the storage since each partial note should only be\n        // used once, but since the AVM offers no gas refunds for doing so this would just make the transaction be more\n        // expensive.\n        assert(context.storage_read(partial_note.commitment()), \"Invalid partial note\");\n        partial_note.complete(token_id, context);\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let mut new_note = NFTNote::new(token_id, to);\n\n        nfts.at(to).insert(new_note).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(from, to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n        let to_nft_count = storage.owner_nft_count.at(to).read();\n        let from_nft_count = storage.owner_nft_count.at(from).read();\n        storage.owner_nft_count.at(to).write(to_nft_count + 1);\n        storage.owner_nft_count.at(from).write(from_nft_count - 1);\n    }\n\n    #[utility]\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n\n    #[utility]\n    unconstrained fn get_public_nfts(\n        owner: AztecAddress,\n        offset: u32,\n    ) -> pub ([Field; MAX_NFTS_PER_PAGE], u32) {\n        let mut owner_nft_ids = [0; MAX_NFTS_PER_PAGE];\n        let owner_nft_count = storage.owner_nft_count.at(owner).read();\n        let total_nft_count = storage.total_nft_count.read();\n\n        let limit = if owner_nft_count > MAX_NFTS_PER_PAGE {\n            MAX_NFTS_PER_PAGE\n        } else {\n            owner_nft_count\n        };\n\n        let mut count = 0;\n\n        for token_id in 1..total_nft_count + 1 {\n            let token_owner = storage.public_owners.at(token_id as Field).read();\n\n            if owner == token_owner {\n                owner_nft_ids[count] = token_id as Field;\n                count += 1;\n            }\n\n            if count == limit {\n                break;\n            }\n        }\n        (owner_nft_ids, owner_nft_count)\n    }\n\n    #[public]\n    fn set_mint_price(new_price: u128) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.mint_price.write(new_price);\n    }\n\n    #[public]\n    #[view]\n    fn get_mint_price() -> u128 {\n        storage.mint_price.read()\n    }\n\n    #[public]\n    fn set_mint_type(is_mint_public: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.is_mint_public.write(is_mint_public);\n    }\n\n    #[public]\n    #[view]\n    fn is_mint_public() -> bool {\n        storage.is_mint_public.read()\n    }\n\n    #[public]\n    fn set_mint_limit_per_wallet(new_mint_limit: u32) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.mint_limit_per_wallet.write(new_mint_limit);\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.minters.at(minter).write(approve);\n    }\n\n    #[public]\n    fn set_fee_recipient(recipient: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        assert(!recipient.is_zero(), \"invalid recipient\");\n        storage.fee_recipient.write(recipient);\n    }\n\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_nft_count(owner: AztecAddress) -> u32 {\n        storage.owner_nft_count.at(owner).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_max_supply() -> u32 {\n        storage.max_supply.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_total_nft_count() -> u32 {\n        storage.total_nft_count.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "60": {
      "path": "/Users/satyam/web3/noir/raven-house/contracts/nft_contract/src/types/nft_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize},\n        utils::arrays::array_concat,\n    },\n};\n\n// NFTNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the token id).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n// docs:start:nft_note\n/// A private note representing a token id associated to an account.\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct NFTNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of NFTPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The ID of the token represented by this note.\n    token_id: Field,\n}\n// docs:end:nft_note\n\nimpl NoteHash for NFTNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because NFTNote has just one variant (where the token id is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            NFTPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note =\n            PartialNFTNote { commitment: private_content.compute_partial_commitment(storage_slot) };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.token_id)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { token_id, owner, randomness }\n    }\n\n    pub fn get_token_id(self) -> Field {\n        self.token_id\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the token id, since the note will be\n    /// later completed in public. This is a powerful technique for scenarios in which the token id cannot be known in\n    /// private (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialNFTNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialNFTNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = NFTPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialNFTNote { commitment }\n    }\n}\n\n/// The private content of a partial NFTNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct NFTPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of NFTNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NFTPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateNFTPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of NFTNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateNFTPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        NFTNote::get_id()\n    }\n}\n\n/// A partial instance of a NFTNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the token id field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the token id to the public), resulting in a NFTNote that can be used like any other one (except\n/// of course that its token id is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialNFTNote {\n    commitment: Field,\n}\n\nimpl PartialNFTNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialNFTNote {\n    /// Completes the partial note, creating a new note that can be used like any other NFTNote.\n    pub fn complete(self, token_id: Field, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(token_id != 0, \"Cannot complete a PartialNFTNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the token id). The contract will later find it by\n        //  searching for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(token_id));\n        context.push_note_hash(self.compute_complete_note_hash(token_id));\n    }\n\n    fn compute_note_completion_log(self, token_id: Field) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, token_id]\n    }\n\n    fn compute_complete_note_hash(self, token_id: Field) -> Field {\n        // Here we finalize the note hash by including the (public) token id into the partial note commitment. Note that\n        // we use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator([self.commitment, token_id], GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n\nmod test {\n    use super::{\n        NFTNote, NFTPartialNotePrivateContent, PartialNFTNote,\n        PrivateNFTPartialNotePrivateLogContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global token_id: Field = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a NFTNote has the same note hash as a PartialNFTNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = NFTNote { token_id, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = NFTPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialNFTNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(token_id);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular NFTNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular NFTNote.\n\n        let note = NFTNote { token_id, randomness, owner };\n\n        let partial_note_private_content = NFTPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialNFTNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(token_id)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in NFTNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(token_id), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "63": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "71": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "72": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "79": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "80": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "81": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "82": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "86": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "98": {
      "path": "/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    }
  }
}
